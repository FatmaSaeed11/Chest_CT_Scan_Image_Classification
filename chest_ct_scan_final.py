{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":1432479,"sourceType":"datasetVersion","datasetId":839140}],"dockerImageVersionId":30787,"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-10-29T01:57:26.862437Z\",\"iopub.execute_input\":\"2024-10-29T01:57:26.862962Z\",\"iopub.status.idle\":\"2024-10-29T01:57:27.198451Z\",\"shell.execute_reply.started\":\"2024-10-29T01:57:26.862927Z\",\"shell.execute_reply\":\"2024-10-29T01:57:27.197572Z\"}}\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-10-29T01:57:11.998170Z\",\"iopub.execute_input\":\"2024-10-29T01:57:11.998474Z\",\"iopub.status.idle\":\"2024-10-29T01:57:26.860652Z\",\"shell.execute_reply.started\":\"2024-10-29T01:57:11.998437Z\",\"shell.execute_reply\":\"2024-10-29T01:57:26.859648Z\"}}\n#generate Images\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\ntrain_datagen = ImageDataGenerator( dtype='float32', )\n\nvalid_datagen = ImageDataGenerator( dtype='float32', )\n\ntest_datagen=ImageDataGenerator( dtype='float32',)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-10-29T01:57:27.199530Z\",\"iopub.execute_input\":\"2024-10-29T01:57:27.199830Z\",\"iopub.status.idle\":\"2024-10-29T01:57:27.253215Z\",\"shell.execute_reply.started\":\"2024-10-29T01:57:27.199799Z\",\"shell.execute_reply\":\"2024-10-29T01:57:27.252520Z\"}}\ntraining_set = train_datagen.flow_from_directory(\n        r'/kaggle/input/chest-ctscan-images/Data/train',\n        target_size=(224, 224),\n        batch_size=64,\n        class_mode='categorical')\n\nvalid_set = valid_datagen.flow_from_directory(\n        r'/kaggle/input/chest-ctscan-images/Data/valid',\n        target_size=(224, 224),\n        batch_size=64,\n        class_mode='categorical')\n\ntest_set = test_datagen.flow_from_directory(\n        r'/kaggle/input/chest-ctscan-images/Data/test',\n        target_size=(224, 224),\n        batch_size=64,\n        class_mode='categorical')\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-10-29T01:57:27.255856Z\",\"iopub.execute_input\":\"2024-10-29T01:57:27.256413Z\",\"iopub.status.idle\":\"2024-10-29T01:57:28.539136Z\",\"shell.execute_reply.started\":\"2024-10-29T01:57:27.256379Z\",\"shell.execute_reply\":\"2024-10-29T01:57:28.538154Z\"}}\n#build VGG from scratch\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout\ntf.random.set_seed(42)\n\nmodel = Sequential()\n\n# Block 1\nmodel.add(Conv2D(64, (3, 3), activation='relu', padding='same', input_shape=(224, 224, 3)))\nmodel.add(Conv2D(64, (3, 3), activation='relu', padding='same'))\nmodel.add(MaxPooling2D((2, 2), strides=(2, 2)))\n\n# Block 2\nmodel.add(Conv2D(128, (3, 3), activation='relu', padding='same'))\nmodel.add(Conv2D(128, (3, 3), activation='relu', padding='same'))\nmodel.add(MaxPooling2D((2, 2), strides=(2, 2)))\n\n# Block 3\nmodel.add(Conv2D(256, (3, 3), activation='relu', padding='same'))\nmodel.add(Conv2D(256, (3, 3), activation='relu', padding='same'))\nmodel.add(Conv2D(256, (3, 3), activation='relu', padding='same'))\nmodel.add(MaxPooling2D((2, 2), strides=(2, 2)))\n\n# Block 4\nmodel.add(Conv2D(512, (3, 3), activation='relu', padding='same'))\nmodel.add(Conv2D(512, (3, 3), activation='relu', padding='same'))\nmodel.add(Conv2D(512, (3, 3), activation='relu', padding='same'))\nmodel.add(MaxPooling2D((2, 2), strides=(2, 2)))\n\n# Block 5\nmodel.add(Conv2D(512, (3, 3), activation='relu', padding='same'))\nmodel.add(Conv2D(512, (3, 3), activation='relu', padding='same'))\nmodel.add(Conv2D(512, (3, 3), activation='relu', padding='same'))\nmodel.add(MaxPooling2D((2, 2), strides=(2, 2)))\n\n# Fully connected layers\nmodel.add(Flatten())\nmodel.add(Dense(4096, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(4096, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(4, activation='softmax'))  # 1000 for ImageNet classes; adjust for your dataset\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n\n# Display the model architecture\nmodel.summary()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-10-29T01:57:28.540227Z\",\"iopub.execute_input\":\"2024-10-29T01:57:28.540526Z\",\"iopub.status.idle\":\"2024-10-29T01:57:28.550070Z\",\"shell.execute_reply.started\":\"2024-10-29T01:57:28.540496Z\",\"shell.execute_reply\":\"2024-10-29T01:57:28.549248Z\"}}\nmodel.compile(optimizer=tf.keras.optimizers.SGD(),loss=tf.keras.losses.CategoricalCrossentropy(from_logits=True), metrics=['accuracy'])\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-10-29T01:57:28.551022Z\",\"iopub.execute_input\":\"2024-10-29T01:57:28.551291Z\",\"iopub.status.idle\":\"2024-10-29T02:01:42.865402Z\",\"shell.execute_reply.started\":\"2024-10-29T01:57:28.551261Z\",\"shell.execute_reply\":\"2024-10-29T02:01:42.864520Z\"}}\nfrom keras.callbacks import EarlyStopping\n\n#early_stopping = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n\nhistory = model.fit( training_set, validation_data=valid_set,  epochs=10, verbose=1)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-10-29T02:01:42.866690Z\",\"iopub.execute_input\":\"2024-10-29T02:01:42.866989Z\",\"iopub.status.idle\":\"2024-10-29T02:01:42.871938Z\",\"shell.execute_reply.started\":\"2024-10-29T02:01:42.866956Z\",\"shell.execute_reply\":\"2024-10-29T02:01:42.870910Z\"}}\ntrain_loss = history.history['loss']\nval_loss = history.history['val_loss']\ntrain_acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-10-29T02:01:42.873196Z\",\"iopub.execute_input\":\"2024-10-29T02:01:42.873556Z\",\"iopub.status.idle\":\"2024-10-29T02:01:43.363435Z\",\"shell.execute_reply.started\":\"2024-10-29T02:01:42.873514Z\",\"shell.execute_reply\":\"2024-10-29T02:01:43.362461Z\"}}\nimport matplotlib.pyplot as plt\n\n# Plot training and validation loss\nplt.figure(figsize=(10, 6))\nplt.plot(train_loss, label='Training Loss')\nplt.plot(val_loss, label='Validation Loss')\nplt.title('Training and Validation Loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend()\nplt.show()\n\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-10-29T02:01:43.364819Z\",\"iopub.execute_input\":\"2024-10-29T02:01:43.365253Z\",\"iopub.status.idle\":\"2024-10-29T02:01:43.635708Z\",\"shell.execute_reply.started\":\"2024-10-29T02:01:43.365202Z\",\"shell.execute_reply\":\"2024-10-29T02:01:43.634611Z\"}}\n# Plot training and validation accuracy\nplt.figure(figsize=(10, 6))\nplt.plot(train_acc, label='Training Accuracy')\nplt.plot(val_acc, label='Validation Accuracy')\nplt.title('Training and Validation Accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.legend()\nplt.show()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-10-29T02:03:55.351661Z\",\"iopub.execute_input\":\"2024-10-29T02:03:55.352069Z\",\"iopub.status.idle\":\"2024-10-29T02:04:26.324452Z\",\"shell.execute_reply.started\":\"2024-10-29T02:03:55.352034Z\",\"shell.execute_reply\":\"2024-10-29T02:04:26.323428Z\"}}\ntest_loss, test_accuracy = model.evaluate(test_set)\nprint('Test accuracy:', test_accuracy)","metadata":{"_uuid":"3f7b7bd4-7d7a-4d51-93e5-b2abd5d55257","_cell_guid":"8f223dc8-fa0f-42cc-8190-82283737e151","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}